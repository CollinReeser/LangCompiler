import std.stdio;
// Filename of parser also generated by this program
import langParser;
interface Visitor
{
    void visit(ProgramNode node);
    void visit(ExternImportNode node);
    void visit(FuncDefNode node);
    void visit(ArgListNode node);
    void visit(CommaArgNode node);
    void visit(BlockNode node);
    void visit(StatementNode node);
    void visit(AssignmentNode node);
    void visit(PassNode node);
    void visit(IfblockNode node);
    void visit(ElseifblockNode node);
    void visit(ElseblockNode node);
    void visit(WhileblockNode node);
    void visit(ParamListNode node);
    void visit(CommaParamNode node);
    void visit(FuncCallNode node);
    void visit(ReturnStmtNode node);
    void visit(PrintNode node);
    void visit(SpawnNode node);
    void visit(ChanReadNode node);
    void visit(ChanWriteNode node);
    void visit(MakeChanNode node);
    void visit(YieldNode node);
    void visit(ExpressionNode node);
    void visit(SumNode node);
    void visit(SumOpProductNode node);
    void visit(ProductNode node);
    void visit(MulOpValueNode node);
    void visit(ValueNode node);
    void visit(ParenExprNode node);
    void visit(TerminatorNode node);
    void visit(SumOpNode node);
    void visit(MulOpNode node);
    void visit(NumNode node);
    void visit(IdentifierNode node);
    void visit(LogicExprNode node);
    void visit(LogicOpLogicRelationshipNode node);
    void visit(LogicRelationshipNode node);
    void visit(RelationOpExpressionNode node);
    void visit(LogicOpNode node);
    void visit(RelationOpNode node);
    void visit(ASTTerminal node);
}

class PrintVisitor : Visitor
{
    string indent;
    this ()
    {
        indent = "";
    }
    void visit(ProgramNode node)
    {
        writeln(indent, "PROGRAMNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(ExternImportNode node)
    {
        writeln(indent, "EXTERNIMPORTNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(FuncDefNode node)
    {
        writeln(indent, "FUNCDEFNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(ArgListNode node)
    {
        writeln(indent, "ARGLISTNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(CommaArgNode node)
    {
        writeln(indent, "COMMAARGNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(BlockNode node)
    {
        writeln(indent, "BLOCKNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(StatementNode node)
    {
        writeln(indent, "STATEMENTNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(AssignmentNode node)
    {
        writeln(indent, "ASSIGNMENTNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(PassNode node)
    {
        writeln(indent, "PASSNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(IfblockNode node)
    {
        writeln(indent, "IFBLOCKNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(ElseifblockNode node)
    {
        writeln(indent, "ELSEIFBLOCKNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(ElseblockNode node)
    {
        writeln(indent, "ELSEBLOCKNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(WhileblockNode node)
    {
        writeln(indent, "WHILEBLOCKNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(ParamListNode node)
    {
        writeln(indent, "PARAMLISTNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(CommaParamNode node)
    {
        writeln(indent, "COMMAPARAMNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(FuncCallNode node)
    {
        writeln(indent, "FUNCCALLNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(ReturnStmtNode node)
    {
        writeln(indent, "RETURNSTMTNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(PrintNode node)
    {
        writeln(indent, "PRINTNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(SpawnNode node)
    {
        writeln(indent, "SPAWNNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(ChanReadNode node)
    {
        writeln(indent, "CHANREADNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(ChanWriteNode node)
    {
        writeln(indent, "CHANWRITENODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(MakeChanNode node)
    {
        writeln(indent, "MAKECHANNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(YieldNode node)
    {
        writeln(indent, "YIELDNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(ExpressionNode node)
    {
        writeln(indent, "EXPRESSIONNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(SumNode node)
    {
        writeln(indent, "SUMNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(SumOpProductNode node)
    {
        writeln(indent, "SUMOPPRODUCTNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(ProductNode node)
    {
        writeln(indent, "PRODUCTNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(MulOpValueNode node)
    {
        writeln(indent, "MULOPVALUENODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(ValueNode node)
    {
        writeln(indent, "VALUENODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(ParenExprNode node)
    {
        writeln(indent, "PARENEXPRNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(TerminatorNode node)
    {
        writeln(indent, "TERMINATORNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(SumOpNode node)
    {
        writeln(indent, "SUMOPNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(MulOpNode node)
    {
        writeln(indent, "MULOPNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(NumNode node)
    {
        writeln(indent, "NUMNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(IdentifierNode node)
    {
        writeln(indent, "IDENTIFIERNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(LogicExprNode node)
    {
        writeln(indent, "LOGICEXPRNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(LogicOpLogicRelationshipNode node)
    {
        writeln(indent, "LOGICOPLOGICRELATIONSHIPNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(LogicRelationshipNode node)
    {
        writeln(indent, "LOGICRELATIONSHIPNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(RelationOpExpressionNode node)
    {
        writeln(indent, "RELATIONOPEXPRESSIONNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(LogicOpNode node)
    {
        writeln(indent, "LOGICOPNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(RelationOpNode node)
    {
        writeln(indent, "RELATIONOPNODE");
        indent ~= "  ";
        foreach (child; node.children)
        {
            child.accept(this);
        }
        indent = indent[0..$-2];
    }
    void visit(ASTTerminal node)
    {
        writeln(indent, "[", node.token, "]: ", node.index);
    }
}

program :: funcDef + ;

funcDef :: #"func" ^identifier argList block ;
argList :: #"\(" ^identifier ? ^commaArg * #"\)" ;
commaArg :: #"," ^identifier ;

block :: #"\{" statement* #"\}" ;
statement :: assignment
           | ifblock
           | whileblock
           | pass
           | block
           | print
           | yield
           | returnStmt
           ;

assignment :: ^identifier #"=" expression #terminator ;
pass :: #"pass" #terminator ;
ifblock :: #"if" #"\(" logicExpr #"\)" statement elseifblock * elseblock ? ;
elseifblock :: #"else" #"if" #"\(" logicExpr #"\)" statement ;
elseblock :: #"else" statement ;

whileblock :: #"while" #"\(" logicExpr #"\)" statement ;


paramList :: #"\(" expression ? ^commaParam * #"\)" ;
commaParam :: #"," expression ;
funcCall :: ^identifier paramList;

returnStmt :: # "return" expression #terminator ;

print :: #"print" ^identifier #terminator ;

yield :: #"yield" #terminator ;

expression :: funcCall | sum ;
sum :: product ^sumOpProduct* ;
sumOpProduct :: ^sumOp product ;
product :: value ^mulOpValue* ;
mulOpValue :: ^mulOp value ;
value :: num
       | parenExpr
       | identifier ;
parenExpr :: #"\(" logicExpr #"\)" ;

terminator :: #";" ;
sumOp :: /[+-]/ ;
mulOp :: /[*\/%]/ ;
num :: /[0-9]+(?:\.[0-9]*)?/ ;
identifier :: /[a-zA-Z_][a-zA-Z0-9_]*/ ;


logicExpr :: logicRelationship ^logicOpLogicRelationship* ;
logicOpLogicRelationship :: ^logicOp logicRelationship;
logicRelationship :: expression ^relationOpExpression ? ;
relationOpExpression :: ^relationOp expression;
logicOp :: "&&"
         | "\|\|" ;
relationOp :: "<="
            | ">="
            | "<"
            | ">"
            | "=="
            | "!=" ;

